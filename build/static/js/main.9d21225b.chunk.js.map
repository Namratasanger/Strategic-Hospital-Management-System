{"version":3,"sources":["images/home-image.svg","images/unlock.svg","images/femaleAvatar.svg","images/wave.svg","images/tree.svg","components/home/home.js","components/login/login.js","components/nav/nav.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","className","to","src","homeImage","alt","Component","Login","femaleAvatar","name","placeholder","type","unlock","Nav","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gFAAAA,EAAOC,QAAU,IAA0B,wC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,0C,sHCA3CD,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,qKCItBC,G,6KAEb,OACI,6BACI,yBAAKC,UAAU,oBACX,yBAAKA,UAAU,UAAf,sBACA,yBAAKA,UAAU,UAAf,qBACA,kBAAC,IAAD,CAAMC,GAAG,SAASD,UAAU,cACxB,4BAAQA,UAAU,eAAc,0CAGxC,yBAAKA,UAAU,SAASE,IAAKC,IAAWC,IAAI,gB,GAX1BC,c,sDCEbC,E,uKAEb,OACI,6BACI,yBAAKN,UAAU,eACX,6BACI,yBAAKA,UAAU,SAASE,IAAKK,OAEjC,8BACI,yBAAKP,UAAU,UACX,2BAAOA,UAAU,YAAYQ,KAAK,WAAWC,YAAY,cAE7D,6BACA,yBAAKT,UAAU,UACX,2BAAOA,UAAU,YAAYU,KAAK,WAAWF,KAAK,WAAWC,YAAY,cAE7E,4BAAQT,UAAU,aACb,0CAIb,yBAAKA,UAAU,OAAOE,IAAKS,IAAQP,IAAI,c,GArBpBC,aCHdO,G,6KAEb,OACI,6BACI,wBAAIZ,UAAU,aACV,kBAAC,IAAD,CAAOC,GAAG,QAAQD,UAAU,SACxB,qCAIJ,kBAAC,IAAD,CAAMC,GAAG,SAASD,UAAU,SACxB,yCAIJ,kBAAC,IAAD,CAAMC,GAAG,SAASD,UAAU,SACxB,4C,GAhBSK,cCEZQ,E,uKAEjB,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWjB,IACjC,kBAAC,IAAD,CAAOe,KAAK,QAAQE,UAAWjB,IAC/B,kBAAC,IAAD,CAAOe,KAAK,SAASE,UAAWV,S,GAPPD,aCObY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9d21225b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/home-image.53a44d68.svg\";","module.exports = __webpack_public_path__ + \"static/media/unlock.54952121.svg\";","module.exports = __webpack_public_path__ + \"static/media/femaleAvatar.b903293c.svg\";","module.exports = __webpack_public_path__ + \"static/media/wave.fc607811.svg\";","module.exports = __webpack_public_path__ + \"static/media/tree.8b857927.svg\";","import React, { Component } from 'react'\r\nimport {Link} from 'react-router-dom';\r\nimport homeImage from '../../images/home-image.svg';\r\nimport './home.css';\r\nexport default class Home extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"contentContainer\">\r\n                    <div className=\"title1\">STRATEGIC HOSPITAL</div>\r\n                    <div className=\"title2\">MANAGEMENT SYSTEM</div>                       \r\n                    <Link to=\"/login\" className=\"home-links\">\r\n                        <button className=\"home-button\"><span>Login</span></button>\r\n                    </Link> \r\n                </div>\r\n                <img className=\"person\" src={homeImage} alt=\"person\"/>               \r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport './login.css';\r\nimport wave from '../../images/wave.svg';\r\nimport tree from '../../images/tree.svg';\r\nimport unlock from '../../images/unlock.svg';\r\nimport femaleAvatar from '../../images/femaleAvatar.svg';\r\nexport default class Login extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"formElement\">\r\n                    <div>\r\n                        <img className=\"avatar\" src={femaleAvatar}/>\r\n                    </div>\r\n                    <form>\r\n                        <div className=\"inputS\">\r\n                            <input className=\"inputSBox\" name=\"username\" placeholder=\"Username\"/>\r\n                        </div>\r\n                        <br/>\r\n                        <div className=\"inputS\">\r\n                            <input className=\"inputSBox\" type=\"password\" name=\"password\" placeholder=\"Password\"/>\r\n                        </div>\r\n                        <button className=\"buttonBox\">\r\n                             <span>Login</span>\r\n                        </button>\r\n                    </form>\r\n                </div>\r\n                <img className=\"tree\" src={unlock} alt=\"Tree\"/>\r\n                {/* <img className=\"upWave\" src={wave} alt=\"Wave\"/> */}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport {Link} from 'react-router-dom';\r\nimport './nav.css';\r\nexport default class Nav extends Component {\r\n    render() {\r\n        return (\r\n            <nav>\r\n                <ul className=\"nav-links\">\r\n                    <Link  to=\"/home\" className=\"links\">\r\n                        <li>\r\n                            Home\r\n                        </li>\r\n                    </Link>\r\n                    <Link to=\"/login\" className=\"links\">\r\n                        <li>\r\n                            About Us\r\n                        </li>\r\n                    </Link>\r\n                    <Link to=\"/login\" className=\"links\">\r\n                        <li>\r\n                            Login\r\n                        </li>\r\n                    </Link>       \r\n                 </ul>\r\n            </nav>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\nimport {Route, BrowserRouter as Router} from 'react-router-dom'\nimport Home from './components/home/home.js';\nimport Login from './components/login/login.js';\nimport Nav from './components/nav/nav.js';\nexport default class App extends Component {\n  render() {\n    return (\n      <Router>\n        <Nav/>\n        <Route path=\"/\" exact component={Home}/>\n        <Route path=\"/home\" component={Home}/>\n        <Route path=\"/login\" component={Login}/>\n      </Router>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}