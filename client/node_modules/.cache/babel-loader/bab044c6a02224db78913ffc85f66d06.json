{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\SEM-7\\\\CAD\\\\shms\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"D:\\\\SEM-7\\\\CAD\\\\shms\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING, FREE_PATIENTS, PATIENT_ERRORS } from \"./types\"; // Register User\n\nexport var registerUser = function registerUser(userData, history) {\n  return function (dispatch) {\n    axios.post(\"/api/users/register\", userData).then(function (res) {\n      return history.push(\"/login\");\n    }).catch(function (err) {\n      return dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    });\n  };\n}; // Login - get user token\n\nexport var loginUser = function loginUser(userData) {\n  return function (dispatch) {\n    axios.post(\"/api/users/login\", userData).then(function (res) {\n      // Save to localStorage\n      // Set token to localStorage\n      var token = res.data.token;\n      localStorage.setItem(\"jwtToken\", token); // Set token to Auth header\n\n      setAuthToken(token); // Decode token to get user data\n\n      var decoded = jwt_decode(token); // Set current user\n\n      dispatch(setCurrentUser(decoded));\n    }).catch(function (err) {\n      return dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    });\n  };\n}; // Set logged in user\n\nexport var setCurrentUser = function setCurrentUser(decoded) {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n}; // User loading\n\nexport var setUserLoading = function setUserLoading() {\n  return {\n    type: USER_LOADING\n  };\n}; // Log user out\n\nexport var logoutUser = function logoutUser() {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      var token, res;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              token = localStorage.getItem(\"jwtToken\");\n              _context.next = 4;\n              return axios.post(\"/api/patient/all\", {\n                headers: {\n                  authorization: token\n                }\n              });\n\n            case 4:\n              res = _context.sent;\n              dispatch({\n                type: FREE_PATIENTS,\n                payload: res.data\n              });\n              _context.next = 11;\n              break;\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](0);\n              dispatch({\n                type: PATIENT_ERRORS,\n                payload: {\n                  msg: _context.t0.response.statusText,\n                  status: _context.t0.response.status\n                }\n              });\n\n            case 11:\n              // Remove token from local storage\n              localStorage.removeItem(\"jwtToken\"); // Remove auth header for future requests\n\n              setAuthToken(false); // Set current user to empty object {} which will set isAuthenticated to false\n\n              dispatch(setCurrentUser({}));\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 8]]);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};","map":{"version":3,"sources":["D:/SEM-7/CAD/shms/client/src/actions/authActions.js"],"names":["axios","setAuthToken","jwt_decode","GET_ERRORS","SET_CURRENT_USER","USER_LOADING","FREE_PATIENTS","PATIENT_ERRORS","registerUser","userData","history","dispatch","post","then","res","push","catch","err","type","payload","response","data","loginUser","token","localStorage","setItem","decoded","setCurrentUser","setUserLoading","logoutUser","getItem","headers","authorization","msg","statusText","status","removeItem"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,SACEC,UADF,EAEEC,gBAFF,EAGEC,YAHF,EAIEC,aAJF,EAKEC,cALF,QAMO,SANP,C,CAQA;;AACA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,QAAD,EAAWC,OAAX;AAAA,SAAuB,UAAAC,QAAQ,EAAI;AAC7DX,IAAAA,KAAK,CACFY,IADH,CACQ,qBADR,EAC+BH,QAD/B,EAEGI,IAFH,CAEQ,UAAAC,GAAG;AAAA,aAAIJ,OAAO,CAACK,IAAR,CAAa,QAAb,CAAJ;AAAA,KAFX,EAGGC,KAHH,CAGS,UAAAC,GAAG;AAAA,aACRN,QAAQ,CAAC;AACPO,QAAAA,IAAI,EAAEf,UADC;AAEPgB,QAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaC;AAFf,OAAD,CADA;AAAA,KAHZ;AASD,GAV2B;AAAA,CAArB,C,CAYP;;AACA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAAb,QAAQ;AAAA,SAAI,UAAAE,QAAQ,EAAI;AAC/CX,IAAAA,KAAK,CACFY,IADH,CACQ,kBADR,EAC4BH,QAD5B,EAEGI,IAFH,CAEQ,UAAAC,GAAG,EAAI;AACX;AACA;AAFW,UAGHS,KAHG,GAGOT,GAAG,CAACO,IAHX,CAGHE,KAHG;AAIXC,MAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCF,KAAjC,EAJW,CAKX;;AACAtB,MAAAA,YAAY,CAACsB,KAAD,CAAZ,CANW,CAOX;;AACA,UAAMG,OAAO,GAAGxB,UAAU,CAACqB,KAAD,CAA1B,CARW,CASX;;AACAZ,MAAAA,QAAQ,CAACgB,cAAc,CAACD,OAAD,CAAf,CAAR;AACD,KAbH,EAcGV,KAdH,CAcS,UAAAC,GAAG;AAAA,aACRN,QAAQ,CAAC;AACPO,QAAAA,IAAI,EAAEf,UADC;AAEPgB,QAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaC;AAFf,OAAD,CADA;AAAA,KAdZ;AAoBD,GArBgC;AAAA,CAA1B,C,CAuBP;;AACA,OAAO,IAAMM,cAAc,GAAG,SAAjBA,cAAiB,CAAAD,OAAO,EAAI;AACvC,SAAO;AACLR,IAAAA,IAAI,EAAEd,gBADD;AAELe,IAAAA,OAAO,EAAEO;AAFJ,GAAP;AAID,CALM,C,CAOP;;AACA,OAAO,IAAME,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAClC,SAAO;AACLV,IAAAA,IAAI,EAAEb;AADD,GAAP;AAGD,CAJM,C,CAMP;;AACA,OAAO,IAAMwB,UAAU,GAAG,SAAbA,UAAa;AAAA;AAAA,wEAAM,iBAAMlB,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEtBY,cAAAA,KAFsB,GAEdC,YAAY,CAACM,OAAb,CAAqB,UAArB,CAFc;AAAA;AAAA,qBAGV9B,KAAK,CAACY,IAAN,CAAW,kBAAX,EAA+B;AAC/CmB,gBAAAA,OAAO,EAAE;AAAEC,kBAAAA,aAAa,EAAET;AAAjB;AADsC,eAA/B,CAHU;;AAAA;AAGtBT,cAAAA,GAHsB;AAM5BH,cAAAA,QAAQ,CAAC;AACPO,gBAAAA,IAAI,EAAEZ,aADC;AAEPa,gBAAAA,OAAO,EAAEL,GAAG,CAACO;AAFN,eAAD,CAAR;AAN4B;AAAA;;AAAA;AAAA;AAAA;AAW5BV,cAAAA,QAAQ,CAAC;AACPO,gBAAAA,IAAI,EAAEX,cADC;AAEPY,gBAAAA,OAAO,EAAE;AAAEc,kBAAAA,GAAG,EAAE,YAAIb,QAAJ,CAAac,UAApB;AAAgCC,kBAAAA,MAAM,EAAE,YAAIf,QAAJ,CAAae;AAArD;AAFF,eAAD,CAAR;;AAX4B;AAgB9B;AACAX,cAAAA,YAAY,CAACY,UAAb,CAAwB,UAAxB,EAjB8B,CAkB9B;;AACAnC,cAAAA,YAAY,CAAC,KAAD,CAAZ,CAnB8B,CAoB9B;;AACAU,cAAAA,QAAQ,CAACgB,cAAc,CAAC,EAAD,CAAf,CAAR;;AArB8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAN;;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB","sourcesContent":["import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\n\nimport {\n  GET_ERRORS,\n  SET_CURRENT_USER,\n  USER_LOADING,\n  FREE_PATIENTS,\n  PATIENT_ERRORS,\n} from \"./types\";\n\n// Register User\nexport const registerUser = (userData, history) => dispatch => {\n  axios\n    .post(\"/api/users/register\", userData)\n    .then(res => history.push(\"/login\"))\n    .catch(err =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data,\n      })\n    );\n};\n\n// Login - get user token\nexport const loginUser = userData => dispatch => {\n  axios\n    .post(\"/api/users/login\", userData)\n    .then(res => {\n      // Save to localStorage\n      // Set token to localStorage\n      const { token } = res.data;\n      localStorage.setItem(\"jwtToken\", token);\n      // Set token to Auth header\n      setAuthToken(token);\n      // Decode token to get user data\n      const decoded = jwt_decode(token);\n      // Set current user\n      dispatch(setCurrentUser(decoded));\n    })\n    .catch(err =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data,\n      })\n    );\n};\n\n// Set logged in user\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded,\n  };\n};\n\n// User loading\nexport const setUserLoading = () => {\n  return {\n    type: USER_LOADING,\n  };\n};\n\n// Log user out\nexport const logoutUser = () => async dispatch => {\n  try {\n    const token = localStorage.getItem(\"jwtToken\");\n    const res = await axios.post(\"/api/patient/all\", {\n      headers: { authorization: token },\n    });\n    dispatch({\n      type: FREE_PATIENTS,\n      payload: res.data,\n    });\n  } catch (err) {\n    dispatch({\n      type: PATIENT_ERRORS,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n  // Remove token from local storage\n  localStorage.removeItem(\"jwtToken\");\n  // Remove auth header for future requests\n  setAuthToken(false);\n  // Set current user to empty object {} which will set isAuthenticated to false\n  dispatch(setCurrentUser({}));\n};\n"]},"metadata":{},"sourceType":"module"}