{"ast":null,"code":"import _classCallCheck from \"D:\\\\SEM-7\\\\CAD\\\\shms\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\SEM-7\\\\CAD\\\\shms\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\SEM-7\\\\CAD\\\\shms\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\SEM-7\\\\CAD\\\\shms\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\SEM-7\\\\CAD\\\\shms\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"D:\\\\SEM-7\\\\CAD\\\\shms\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"D:\\\\SEM-7\\\\CAD\\\\shms\\\\client\\\\src\\\\components\\\\dashboard\\\\Modals.js\";\nimport React, { Component } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Modal from \"react-bootstrap/Modal\";\nimport { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { getAPatient, freePatientData } from \"../../actions/patientlistActions\";\n\nvar Modals = /*#__PURE__*/function (_Component) {\n  _inherits(Modals, _Component);\n\n  function Modals(props) {\n    var _this;\n\n    _classCallCheck(this, Modals);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Modals).call(this, props));\n\n    _this.handleScan = function (data) {\n      if (data) {\n        _this.setState({\n          result: data\n        });\n      }\n    };\n\n    _this.state = {\n      show: false,\n      result: \"No result\"\n    };\n    _this.handleShow = _this.handleShow.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleClose = _this.handleClose.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Modals, [{\n    key: \"handleShow\",\n    value: function handleShow() {\n      console.log(\"in handle show\");\n      this.setState({\n        show: true\n      });\n    }\n  }, {\n    key: \"handleClose\",\n    value: function handleClose() {\n      console.log(\"in handle close\");\n      this.setState({\n        show: false\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      console.log(\"component mounted\");\n      this.props.getAPatient(this.props.match.params.id);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      console.log(\"component unmounted\");\n      this.props.freePatientData();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var data = this.props.patients.data;\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Link, {\n        to: \"/dashboard\",\n        className: \"btn-flat waves-effect\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"i\", {\n        className: \"material-icons left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }\n      }, \"keyboard_backspace\"), \" Back to patient list\"), console.log(\"id : \", data), /*#__PURE__*/React.createElement(Form, {\n        style: {\n          marginLeft: \"2rem\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Form.Group, {\n        as: Row,\n        controlId: \"formPlaintextEmail\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Form.Label, {\n        column: true,\n        sm: \"1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }\n      }, \"Name\"), /*#__PURE__*/React.createElement(Col, {\n        sm: \"10\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Form.Control, {\n        readOnly: true,\n        defaultValue: typeof data.name === undefined ? \"No data available\" : data.name,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 15\n        }\n      }))), /*#__PURE__*/React.createElement(Form.Group, {\n        as: Row,\n        controlId: \"formPlaintextEmail\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Form.Label, {\n        column: true,\n        sm: \"1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }\n      }, \"Since\"), /*#__PURE__*/React.createElement(Col, {\n        sm: \"10\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }\n      }, console.log(\"data.from : \", data.from), /*#__PURE__*/React.createElement(Form.Control, {\n        plaintext: true,\n        readOnly: true,\n        defaultValue: typeof data.from === undefined ? \"No data available\" : data.from,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 15\n        }\n      }))), /*#__PURE__*/React.createElement(Form.Group, {\n        as: Row,\n        controlId: \"formPlaintextEmail\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Form.Label, {\n        column: true,\n        sm: \"1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }\n      }, \"Disease\"), /*#__PURE__*/React.createElement(Col, {\n        sm: \"10\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Form.Control, {\n        plaintext: true,\n        readOnly: true,\n        defaultValue: data.disease,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 15\n        }\n      }))), /*#__PURE__*/React.createElement(Form.Group, {\n        as: Row,\n        controlId: \"formPlaintextEmail\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Form.Label, {\n        column: true,\n        sm: \"1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }\n      }, \"Description\"), /*#__PURE__*/React.createElement(Col, {\n        sm: \"10\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }\n      }, !data.disease ? console.log(\"Data not available\") : console.log(\"Data available\"), /*#__PURE__*/React.createElement(Form.Control, {\n        as: \"textarea\",\n        rows: \"3\",\n        readOnly: true,\n        defaultValue: !data.description ? \"Not available\" : data.description,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 15\n        }\n      }))), /*#__PURE__*/React.createElement(Form.Group, {\n        as: Row,\n        controlId: \"formPlaintextEmail\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Form.Label, {\n        column: true,\n        sm: \"1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }\n      }, \"Prescription\"), /*#__PURE__*/React.createElement(Col, {\n        sm: \"10\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Form.Control, {\n        as: \"textarea\",\n        rows: \"3\",\n        defaultValue: \"Enter the prescription here\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 15\n        }\n      }))), /*#__PURE__*/React.createElement(Button, {\n        variant: \"primary\",\n        onClick: this.handleShow,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }\n      }, \"Launch demo modal\")), /*#__PURE__*/React.createElement(Modal, {\n        show: this.state.show,\n        onHide: this.handleClose,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Modal.Header, {\n        closeButton: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Modal.Title, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 13\n        }\n      }, \"Modal heading\")), /*#__PURE__*/React.createElement(Modal.Body, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(Modal.Footer, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: \"secondary\",\n        onClick: this.handleClose,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 13\n        }\n      }, \"Close\"))));\n    }\n  }]);\n\n  return Modals;\n}(Component);\n\nModals.propTypes = {\n  getAPatient: PropTypes.func.isRequired,\n  patients: PropTypes.object.isRequired\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    patients: state.patients\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getAPatient: getAPatient,\n  freePatientData: freePatientData\n})(Modals);","map":{"version":3,"sources":["D:/SEM-7/CAD/shms/client/src/components/dashboard/Modals.js"],"names":["React","Component","Button","Form","Row","Col","Modal","Link","PropTypes","connect","getAPatient","freePatientData","Modals","props","handleScan","data","setState","result","state","show","handleShow","bind","handleClose","console","log","match","params","id","patients","marginLeft","name","undefined","from","disease","description","propTypes","func","isRequired","object","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport { Link } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { getAPatient,freePatientData } from \"../../actions/patientlistActions\";\r\n\r\nclass Modals extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      show: false,\r\n      result:\"No result\"\r\n    };\r\n    this.handleShow = this.handleShow.bind(this);\r\n    this.handleClose = this.handleClose.bind(this);\r\n  }\r\n  handleShow() {\r\n    console.log(\"in handle show\");\r\n    this.setState({\r\n      show: true,\r\n    });\r\n  }\r\n  handleClose() {\r\n    console.log(\"in handle close\");\r\n    this.setState({\r\n      show: false,\r\n    });\r\n  }\r\n  handleScan = data => {\r\n    if (data) {\r\n      this.setState({\r\n        result: data\r\n      })\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    console.log(\"component mounted\")\r\n    this.props.getAPatient(this.props.match.params.id);\r\n  }\r\n  componentWillUnmount(){\r\n    console.log(\"component unmounted\")\r\n    this.props.freePatientData();\r\n  }\r\n  render() {\r\n    const { data } = this.props.patients;\r\n    return (\r\n      <>\r\n        <Link to='/dashboard' className='btn-flat waves-effect'>\r\n          <i className='material-icons left'>keyboard_backspace</i> Back to\r\n          patient list\r\n        </Link>\r\n        {console.log(\"id : \",data)}\r\n        <Form style={{ marginLeft: \"2rem\" }}>\r\n          <Form.Group as={Row} controlId='formPlaintextEmail'>\r\n            <Form.Label column sm='1'>\r\n              Name\r\n            </Form.Label>\r\n            <Col sm='10'>\r\n              <Form.Control\r\n                \r\n                readOnly\r\n                defaultValue={typeof(data.name) === undefined ? \"No data available\" : data.name}\r\n              />\r\n            </Col>\r\n          </Form.Group>\r\n          <Form.Group as={Row} controlId='formPlaintextEmail'>\r\n            <Form.Label column sm='1'>\r\n              Since\r\n            </Form.Label>\r\n            <Col sm='10'>\r\n              {console.log(\"data.from : \",data.from)}\r\n              <Form.Control\r\n                plaintext\r\n                readOnly\r\n                defaultValue={typeof(data.from) === undefined ? \"No data available\" : data.from}\r\n              />\r\n            </Col>\r\n          </Form.Group>\r\n          <Form.Group as={Row} controlId='formPlaintextEmail'>\r\n            <Form.Label column sm='1'>\r\n              Disease\r\n            </Form.Label>\r\n            <Col sm='10'>\r\n              <Form.Control\r\n                plaintext\r\n                readOnly\r\n                defaultValue={data.disease }\r\n              />\r\n            </Col>\r\n          </Form.Group>\r\n          <Form.Group as={Row} controlId='formPlaintextEmail'>\r\n            <Form.Label column sm='1'>\r\n              Description\r\n            </Form.Label>\r\n            <Col sm='10'>\r\n              { !data.disease ? console.log(\"Data not available\") : console.log(\"Data available\")}\r\n              <Form.Control as='textarea' rows='3' readOnly defaultValue={!data.description?\"Not available\":data.description} />\r\n            </Col>\r\n          </Form.Group>\r\n          <Form.Group as={Row} controlId='formPlaintextEmail'>\r\n            <Form.Label column sm='1'>\r\n              Prescription\r\n            </Form.Label>\r\n            <Col sm='10'>\r\n              <Form.Control as='textarea' rows='3' defaultValue=\"Enter the prescription here\" />\r\n            </Col>\r\n          </Form.Group>\r\n\r\n          <Button variant='primary' onClick={this.handleShow}>\r\n            Launch demo modal\r\n          </Button>\r\n        </Form>\r\n        <Modal show={this.state.show} onHide={this.handleClose}>\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>Modal heading</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body></Modal.Body>\r\n          <Modal.Footer>\r\n            <Button variant='secondary' onClick={this.handleClose}>\r\n              Close\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nModals.propTypes = {\r\n  getAPatient: PropTypes.func.isRequired,\r\n  patients: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  patients: state.patients,\r\n});\r\nexport default   connect(mapStateToProps, { getAPatient,freePatientData })(Modals)\r\n"]},"metadata":{},"sourceType":"module"}