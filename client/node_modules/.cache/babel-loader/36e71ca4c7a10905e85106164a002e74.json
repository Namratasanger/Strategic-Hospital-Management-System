{"ast":null,"code":"import _classCallCheck from \"D:\\\\SEM-7\\\\CAD\\\\shms\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\SEM-7\\\\CAD\\\\shms\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\SEM-7\\\\CAD\\\\shms\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\SEM-7\\\\CAD\\\\shms\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\SEM-7\\\\CAD\\\\shms\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\SEM-7\\\\CAD\\\\shms\\\\client\\\\src\\\\components\\\\dashboard\\\\Cards.js\";\nimport React, { Component } from \"react\";\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport Modal from \"react-bootstrap/Modal\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Button from \"react-bootstrap/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { Link } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { getPatientLists } from \"../../actions/patientlistActions\";\nimport { loginUser } from \"../../actions/authActions\";\n\nvar useCardStyles = function useCardStyles(theme) {\n  return {\n    root: {\n      minWidth: 275,\n      maxWidth: 275\n    },\n    bullet: {\n      display: \"inline-block\",\n      margin: \"0 2px\",\n      transform: \"scale(0.8)\"\n    },\n    title: {\n      fontSize: 14\n    },\n    pos: {\n      marginBottom: 12\n    }\n  };\n};\n\nvar SimpleCard = /*#__PURE__*/function (_Component) {\n  _inherits(SimpleCard, _Component);\n\n  function SimpleCard() {\n    _classCallCheck(this, SimpleCard);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(SimpleCard).apply(this, arguments));\n  }\n\n  _createClass(SimpleCard, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this = this;\n\n      console.log(\" cards component mounted\");\n      setTimeout(function () {\n        _this.props.getPatientLists();\n      }, 500);\n    }\n  }, {\n    key: \"componentDidUnMount\",\n    value: function componentDidUnMount() {\n      console.log(\"cards unmounted\");\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var classes = this.props.classes;\n      var list = this.props.patients.list;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          display: \"flex\",\n          flexWrap: \"wrap\",\n          marginLeft: \"150px\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 7\n        }\n      }, this.props.patients.list !== null ? !this.props.patients.loading ? console.log(\"lists : \", list) : \"\" : \"\", list.data ? /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }\n      }, list.data) : Object.keys(list).map(function (key) {\n        console.log(list[key].disease.toString().split(\",\"));\n        Object.keys(list[key].disease.toString().split(\",\")).map(function (index) {\n          console.log(list[key].disease.toString().split(\",\")[index]);\n        });\n        return /*#__PURE__*/React.createElement(Card, {\n          className: classes.root,\n          style: {\n            // backgroundImage:\n            //   \"linear-gradient(180deg,rgb(12,194,146),rgb(13, 231, 160),rgb(24, 242, 180))\",\n            backgroundColor: \"#D5D5D5\",\n            minWidth: 300,\n            maxWidth: 300,\n            margin: \"10px 20px 10px 20px\"\n          },\n          key: list[key]._id,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(CardContent, {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(Typography, {\n          variant: \"h4\",\n          component: 'span',\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 19\n          }\n        }, list[key].name), /*#__PURE__*/React.createElement(\"br\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 19\n          }\n        }), /*#__PURE__*/React.createElement(Typography, {\n          className: classes.pos,\n          component: 'span',\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 19\n          }\n        }, \"Disease\", /*#__PURE__*/React.createElement(\"br\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 21\n          }\n        }), /*#__PURE__*/React.createElement(Typography, {\n          className: classes.title,\n          color: \"textSecondary\",\n          gutterBottom: true,\n          component: 'span',\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 21\n          }\n        }, list[key].disease), /*#__PURE__*/React.createElement(\"br\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 21\n          }\n        })), /*#__PURE__*/React.createElement(Typography, {\n          className: classes.pos,\n          component: 'span',\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 19\n          }\n        }, \"Since\", /*#__PURE__*/React.createElement(\"br\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 21\n          }\n        }), /*#__PURE__*/React.createElement(Typography, {\n          className: classes.title,\n          color: \"textSecondary\",\n          gutterBottom: true,\n          component: 'span',\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 21\n          }\n        }, list[key].from)), /*#__PURE__*/React.createElement(\"br\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 19\n          }\n        }), /*#__PURE__*/React.createElement(Typography, {\n          className: classes.pos,\n          component: 'span',\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 19\n          }\n        }, \"Description\", /*#__PURE__*/React.createElement(\"br\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 21\n          }\n        }), /*#__PURE__*/React.createElement(Typography, {\n          className: classes.title,\n          color: \"textSecondary\",\n          gutterBottom: true,\n          component: 'span',\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 21\n          }\n        }, list[key].description))), /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            borderColor: \"rgb(197, 251, 237)\",\n            borderWidth: \"1px\",\n            border: \"1px solid rgb(197, 251, 237)\"\n          },\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 17\n          }\n        }), /*#__PURE__*/React.createElement(CardActions, {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(Link, {\n          to: '/modal/' + list[key]._id,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 19\n          }\n        }, /*#__PURE__*/React.createElement(Button, {\n          variant: \"light\",\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 19\n          }\n        }, \"Write Presctiption\"))));\n      }));\n    }\n  }]);\n\n  return SimpleCard;\n}(Component);\n\nSimpleCard.propTypes = {\n  getPatientLists: PropTypes.func.isRequired,\n  patients: PropTypes.object.isRequired\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    patients: state.patients\n  };\n};\n\nexport default withStyles(useCardStyles)(connect(mapStateToProps, {\n  loginUser: loginUser,\n  getPatientLists: getPatientLists\n})(SimpleCard));","map":{"version":3,"sources":["D:/SEM-7/CAD/shms/client/src/components/dashboard/Cards.js"],"names":["React","Component","makeStyles","withStyles","Card","Modal","CardActions","CardContent","Button","Typography","Link","PropTypes","connect","getPatientLists","loginUser","useCardStyles","theme","root","minWidth","maxWidth","bullet","display","margin","transform","title","fontSize","pos","marginBottom","SimpleCard","console","log","setTimeout","props","classes","list","patients","flexWrap","marginLeft","loading","data","Object","keys","map","key","disease","toString","split","index","backgroundColor","_id","name","from","description","borderColor","borderWidth","border","propTypes","func","isRequired","object","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { getPatientLists } from \"../../actions/patientlistActions\";\r\nimport { loginUser } from \"../../actions/authActions\";\r\n\r\nconst useCardStyles = theme => ({\r\n  root: {\r\n    minWidth: 275,\r\n    maxWidth: 275,\r\n  },\r\n  bullet: {\r\n    display: \"inline-block\",\r\n    margin: \"0 2px\",\r\n    transform: \"scale(0.8)\",\r\n  },\r\n  title: {\r\n    fontSize: 14,\r\n  },\r\n  pos: {\r\n    marginBottom: 12,\r\n  },\r\n});\r\nclass SimpleCard extends Component {\r\n  componentDidMount() {\r\n    console.log(\" cards component mounted\")\r\n    setTimeout(()=>{\r\n      this.props.getPatientLists();\r\n    },500)\r\n  }\r\n  componentDidUnMount(){\r\n    console.log(\"cards unmounted\")\r\n  }\r\n  render() {\r\n    const { classes } = this.props;\r\n    const { list } = this.props.patients;\r\n    return (\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          flexWrap: \"wrap\",\r\n          marginLeft: \"150px\",\r\n        }}\r\n      >\r\n        {this.props.patients.list !== null\r\n          ? !this.props.patients.loading\r\n            ? console.log(\"lists : \", list)\r\n            : \"\"\r\n          : \"\"}\r\n        {list.data ? (\r\n          <p>{list.data}</p>\r\n        ) : (\r\n          Object.keys(list).map(key => {\r\n            console.log(list[key].disease.toString().split(\",\"));\r\n            Object.keys(list[key].disease.toString().split(\",\")).map(index => {\r\n              console.log(list[key].disease.toString().split(\",\")[index]);\r\n            });\r\n            return (\r\n              <Card\r\n                className={classes.root}\r\n                style={{\r\n                  // backgroundImage:\r\n                  //   \"linear-gradient(180deg,rgb(12,194,146),rgb(13, 231, 160),rgb(24, 242, 180))\",\r\n                  backgroundColor:\"#D5D5D5\",\r\n                  minWidth: 300,\r\n                  maxWidth: 300,\r\n                  margin: \"10px 20px 10px 20px\",\r\n                }}\r\n                key={list[key]._id}\r\n              >\r\n                <CardContent>\r\n                  <Typography variant='h4' component={'span'}>\r\n                    {list[key].name}\r\n                  </Typography>\r\n                  <br/>\r\n                  <Typography className={classes.pos} component={'span'}>\r\n                    Disease\r\n                    <br/>\r\n                    <Typography\r\n                      className={classes.title}\r\n                      color='textSecondary'\r\n                      gutterBottom\r\n                      component={'span'}\r\n                    >\r\n                      {list[key].disease}\r\n                    </Typography>\r\n                    <br/>\r\n                  </Typography>\r\n\r\n                  <Typography className={classes.pos} component={'span'}>\r\n                    Since\r\n                    <br/>\r\n                    <Typography\r\n                      className={classes.title}\r\n                      color='textSecondary'\r\n                      gutterBottom\r\n                      component={'span'}\r\n                    >\r\n                      {list[key].from}\r\n                    </Typography>\r\n                  </Typography>\r\n                  <br/>\r\n                  <Typography className={classes.pos} component={'span'}>\r\n                    Description\r\n                    <br/>\r\n                    <Typography\r\n                      className={classes.title}\r\n                      color='textSecondary'\r\n                      gutterBottom\r\n                      component={'span'}\r\n                    >\r\n                      {list[key].description}\r\n                    </Typography>\r\n                  </Typography>\r\n                </CardContent>\r\n                <div\r\n                  style={{\r\n                    borderColor: \"rgb(197, 251, 237)\",\r\n                    borderWidth: \"1px\",\r\n                    border: \"1px solid rgb(197, 251, 237)\",\r\n                  }}\r\n                ></div>\r\n                <CardActions >\r\n                  <Link to={'/modal/'+list[key]._id}>\r\n                  <Button variant=\"light\">Write Presctiption</Button>\r\n                  </Link>\r\n                </CardActions>\r\n              </Card>\r\n            );\r\n          })\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nSimpleCard.propTypes = {\r\n  getPatientLists: PropTypes.func.isRequired,\r\n  patients: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  patients: state.patients,\r\n});\r\nexport default withStyles(useCardStyles)(\r\n  connect(mapStateToProps, { loginUser, getPatientLists })(SimpleCard)\r\n);\r\n"]},"metadata":{},"sourceType":"module"}