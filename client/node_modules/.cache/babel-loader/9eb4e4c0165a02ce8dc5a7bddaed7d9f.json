{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\SEM-7\\\\CAD\\\\shms\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"D:\\\\SEM-7\\\\CAD\\\\shms\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport axios from \"axios\";\nimport { GET_PATIENT, PATIENT_ERRORS, GET_A_PATIENT } from \"./types\"; //get all patients data\n\nexport var getPatientLists = function getPatientLists() {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      var token, res;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              token = localStorage.getItem(\"jwtToken\");\n              _context.next = 4;\n              return axios.post(\"/api/patient/all\", {\n                headers: {\n                  authorization: token\n                }\n              });\n\n            case 4:\n              res = _context.sent;\n              dispatch({\n                type: GET_PATIENT,\n                payload: res.data\n              });\n              _context.next = 11;\n              break;\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](0);\n              dispatch({\n                type: PATIENT_ERRORS,\n                payload: {\n                  msg: _context.t0.response,\n                  status: _context.t0.response.status\n                }\n              });\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 8]]);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n}; //get the patient data\n\nexport var getAPatient = function getAPatient(id) {\n  return /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch) {\n      var res;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return axios.get(\"/api/patient\", {\n                params: {\n                  id: id\n                }\n              });\n\n            case 3:\n              res = _context2.sent;\n              dispatch({\n                type: GET_A_PATIENT,\n                payload: res.data\n              });\n              _context2.next = 10;\n              break;\n\n            case 7:\n              _context2.prev = 7;\n              _context2.t0 = _context2[\"catch\"](0);\n              dispatch({\n                type: PATIENT_ERRORS,\n                payload: {\n                  msg: _context2.t0.response,\n                  status: _context2.t0.response.status\n                }\n              });\n\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[0, 7]]);\n    }));\n\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n}; //free the patient data\n\nexport var freePatientData = function freePatientData(id) {\n  return /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dispatch) {\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              try {\n                dispatch({\n                  type: GET_A_PATIENT,\n                  payload: \"\"\n                });\n              } catch (err) {\n                dispatch({\n                  type: PATIENT_ERRORS,\n                  payload: {\n                    msg: err.response,\n                    status: err.response.status\n                  }\n                });\n              }\n\n            case 1:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function (_x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n};","map":{"version":3,"sources":["D:/SEM-7/CAD/shms/client/src/actions/patientlistActions.js"],"names":["axios","GET_PATIENT","PATIENT_ERRORS","GET_A_PATIENT","getPatientLists","dispatch","token","localStorage","getItem","post","headers","authorization","res","type","payload","data","msg","response","status","getAPatient","id","get","params","freePatientData","err"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,WAAT,EAAsBC,cAAtB,EAAqCC,aAArC,QAA0D,SAA1D,C,CAEA;;AACA,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB;AAAA;AAAA,wEAAM,iBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAE3BC,cAAAA,KAF2B,GAEnBC,YAAY,CAACC,OAAb,CAAqB,UAArB,CAFmB;AAAA;AAAA,qBAGfR,KAAK,CAACS,IAAN,CAAW,kBAAX,EAA+B;AAC/CC,gBAAAA,OAAO,EAAE;AAAEC,kBAAAA,aAAa,EAAEL;AAAjB;AADsC,eAA/B,CAHe;;AAAA;AAG3BM,cAAAA,GAH2B;AAMjCP,cAAAA,QAAQ,CAAC;AACPQ,gBAAAA,IAAI,EAAEZ,WADC;AAEPa,gBAAAA,OAAO,EAAEF,GAAG,CAACG;AAFN,eAAD,CAAR;AANiC;AAAA;;AAAA;AAAA;AAAA;AAWjCV,cAAAA,QAAQ,CAAC;AACPQ,gBAAAA,IAAI,EAAEX,cADC;AAEPY,gBAAAA,OAAO,EAAE;AAAEE,kBAAAA,GAAG,EAAE,YAAIC,QAAX;AAAqBC,kBAAAA,MAAM,EAAE,YAAID,QAAJ,CAAaC;AAA1C;AAFF,eAAD,CAAR;;AAXiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAN;;AAAA;AAAA;AAAA;AAAA;AAAA,CAAxB,C,CAkBP;;AACA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,EAAD;AAAA;AAAA,yEAAQ,kBAAMf,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEbL,KAAK,CAACqB,GAAN,CAAU,cAAV,EAA0B;AAC1CC,gBAAAA,MAAM,EAAE;AACNF,kBAAAA,EAAE,EAAEA;AADE;AADkC,eAA1B,CAFa;;AAAA;AAEzBR,cAAAA,GAFyB;AAQ/BP,cAAAA,QAAQ,CAAC;AACPQ,gBAAAA,IAAI,EAAEV,aADC;AAEPW,gBAAAA,OAAO,EAAEF,GAAG,CAACG;AAFN,eAAD,CAAR;AAR+B;AAAA;;AAAA;AAAA;AAAA;AAa/BV,cAAAA,QAAQ,CAAC;AACPQ,gBAAAA,IAAI,EAAEX,cADC;AAEPY,gBAAAA,OAAO,EAAE;AAAEE,kBAAAA,GAAG,EAAE,aAAIC,QAAX;AAAqBC,kBAAAA,MAAM,EAAE,aAAID,QAAJ,CAAaC;AAA1C;AAFF,eAAD,CAAR;;AAb+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAR;;AAAA;AAAA;AAAA;AAAA;AAAA,CAApB,C,CAoBP;;AACA,OAAO,IAAMK,eAAe,GAAG,SAAlBA,eAAkB,CAACH,EAAD;AAAA;AAAA,yEAAQ,kBAAMf,QAAN;AAAA;AAAA;AAAA;AAAA;AACrC,kBAAI;AACFA,gBAAAA,QAAQ,CAAC;AACPQ,kBAAAA,IAAI,EAAEV,aADC;AAEPW,kBAAAA,OAAO,EAAE;AAFF,iBAAD,CAAR;AAID,eALD,CAKE,OAAOU,GAAP,EAAY;AACZnB,gBAAAA,QAAQ,CAAC;AACPQ,kBAAAA,IAAI,EAAEX,cADC;AAEPY,kBAAAA,OAAO,EAAE;AAAEE,oBAAAA,GAAG,EAAEQ,GAAG,CAACP,QAAX;AAAqBC,oBAAAA,MAAM,EAAEM,GAAG,CAACP,QAAJ,CAAaC;AAA1C;AAFF,iBAAD,CAAR;AAID;;AAXoC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAR;;AAAA;AAAA;AAAA;AAAA;AAAA,CAAxB","sourcesContent":["import axios from \"axios\";\r\n\r\nimport { GET_PATIENT, PATIENT_ERRORS,GET_A_PATIENT } from \"./types\";\r\n\r\n//get all patients data\r\nexport const getPatientLists = () => async dispatch => {\r\n  try {\r\n    const token = localStorage.getItem(\"jwtToken\");\r\n    const res = await axios.post(\"/api/patient/all\", {\r\n      headers: { authorization: token },\r\n    });\r\n    dispatch({\r\n      type: GET_PATIENT,\r\n      payload: res.data,\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: PATIENT_ERRORS,\r\n      payload: { msg: err.response, status: err.response.status },\r\n    });\r\n  }\r\n};\r\n\r\n//get the patient data\r\nexport const getAPatient = (id) => async dispatch => {\r\n  try {\r\n    const res = await axios.get(\"/api/patient\", {\r\n      params: {\r\n        id: id\r\n      }\r\n\r\n    });\r\n    dispatch({\r\n      type: GET_A_PATIENT,\r\n      payload: res.data,\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: PATIENT_ERRORS,\r\n      payload: { msg: err.response, status: err.response.status },\r\n    });\r\n  }\r\n};\r\n\r\n//free the patient data\r\nexport const freePatientData = (id) => async dispatch => {\r\n  try {\r\n    dispatch({\r\n      type: GET_A_PATIENT,\r\n      payload: \"\",\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: PATIENT_ERRORS,\r\n      payload: { msg: err.response, status: err.response.status },\r\n    });\r\n  }\r\n};\r\n\r\n"]},"metadata":{},"sourceType":"module"}